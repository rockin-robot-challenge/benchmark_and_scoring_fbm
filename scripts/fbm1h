#!/usr/bin/env python
# -*- coding: utf-8 -*-
import math
import random
import time
import yaml

# ROS imports
import rospy
import tf
from rockin_scoring.BmBox import BmBox
from std_msgs.msg import Header, String, Bool

# Benchmark runs
BENCHMARK_RUNS = 10

# Testbed size
SIZE_X = 1
SIZE_Y = 1

# Ground truth accuracy
TRANS_ACCURACY = 0.0 # meters
ROT_ACCURACY = 0.0 # degrees

def main():

	# Init benchmarking node
	benchmark = BmBox()
	rospy.loginfo("FBM1H benchmarking node started")
	
	# init tf
	listener = tf.TransformListener()
	br = tf.TransformBroadcaster()
	score_msgs_publisher = rospy.Publisher('/visualisation/current_score', String, queue_size=10)

	# Get items
	items = rospy.get_param('items')

	# Variables to compute score
	runs = 0
	class_positives = 0.0
	instance_positives = 0.0
	pose_score_sum = 0.0
	execution_time = 0.0
	
	# Maximum pose error
	max_pose_error = math.sqrt(math.pow(SIZE_X, 2) + math.pow(SIZE_Y, 2))

	score_msgs = String()
	score_msgs.data = "\n\n\n\n\nPartial Score:\n"

	# Wait for client
	benchmark.WaitClient()

	# Start the benchmark
	while benchmark.Running() and (runs < BENCHMARK_RUNS):
		runs = runs + 1

		# Pick a random item and remove it from the list
		item = random.choice(items)
		items.remove(item)
		
		# Request manual operation to the refbox
		print "Place item %d (%s) on the table" % (item['id'], item['instance'])
		benchmark.ManualOperation("Place item %d (%s) on the table" % (item['id'], item['instance']))

		if not benchmark.Running():
			break
				

		if not benchmark.Running():
			print "NOT RUNNING"
			break

		# Look for the ref board
		ref_board_visible = False
		while (not ref_board_visible):
			try:
				listener.lookupTransform("/origin", "/ref_board", rospy.Time(0))
				ref_board_visible = True

			except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
				rospy.loginfo("Reference board not visible")
				time.sleep(1)
				ref_board_visible = False
		
		#Added by Meysam to support removal of the positioner
		now = rospy.Time.now()
		br.sendTransform(item['trans'], item['rot'], now, "item", "ref_board")
		time.sleep(0.5)
		
		listener.waitForTransform("/origin", "/item", now, rospy.Duration(2.0))
		
		(trans, rot) = listener.lookupTransform("/origin", "/item", rospy.Time(0))		
		euler = tf.transformations.euler_from_quaternion(rot)
		temptemp= raw_input("REMOVE POSITIONER and press enter")
		#End 				

		# Send goal
		benchmark.SendGoal()
		start_time = time.time()
		
		# Wait for result from client
		result_yaml = benchmark.WaitResult()
		end_time = time.time()
		
		if benchmark.Timeout():
			print "TIMEOUT"
			execution_time = execution_time + (end_time - start_time)
			continue

		if not benchmark.Running():
			print "NOT RUNNING"
			continue
		
		result = yaml.load(result_yaml)
		
		rospy.loginfo("Received result - Class: %s\tInstance: %s\tX: %f\tY: %f\tW: %f"
			% (result['item_class'], result['item_instance'], result['x'], result['y'], result['theta']))
		
		result_trans = (result['x'], result['y'], 0)
		result_rot = tf.transformations.quaternion_from_euler(0, 0, result['theta'] * math.pi / 180)
		
		# Evaluate class
		if (result['item_class'] == item['class']):
			class_positives = class_positives + 1
			print ("class_positives = %d" % class_positives)
		
		# Evaluate instance
		if (result['item_instance'] == item['instance']):
			instance_positives = instance_positives + 1
			print ("instance_positives = %d" % instance_positives)

		# Evaluate position error
		#now = rospy.Time.now()
		#br.sendTransform(item['trans'], item['rot'], now, "item", "ref_board")
		#time.sleep(0.5)
		br.sendTransform(result_trans, result_rot, now, "result_%d" % runs, "origin")
		time.sleep(0.5)
		
		#listener.waitForTransform("/origin", "/item", now, rospy.Duration(2.0))
		
		#(trans, rot) = listener.lookupTransform("/origin", "/item", rospy.Time(0))		
		#euler = tf.transformations.euler_from_quaternion(rot)
		
		x_err = result['x'] - trans[0]
		y_err = result['y'] - trans[1]
		w_err = (result['theta'] - euler[2] * 180 / math.pi)

		if w_err > 180: w_err = w_err - 360
		if w_err < -180: w_err = w_err + 360

		rospy.loginfo("Item received  - X: %2.5f\tY: %2.5f\tW: %3.2f"
			% (result_trans[0], result_trans[1], result['theta']))
		rospy.loginfo("Item acquired  - X: %2.5f\tY: %2.5f\tW: %3.2f"
			% (trans[0], trans[1], euler[2] * 180 / math.pi))
		rospy.loginfo("Error measured - X: %2.5f\tY: %2.5f\tW: %3.2f"
			% (x_err, y_err, w_err))
	

		score_msgs.data += "\nRUN %i\n\n" % runs

		score_msgs.data += "Actual Item\t\tClass: %s\tInstance: %s\n" % ((item['class'], item['instance']))
		score_msgs.data += "Received Item\t\tClass: %s\tInstance: %s\n" % (result['item_class'], result['item_instance'])
		
		score_msgs.data += "\n"

		score_msgs.data += "Actual Item pose\tx: %2.5f\ty: %2.5f\tw: %3.2f\n" % (trans[0], trans[1], euler[2] * 180 / math.pi)
		score_msgs.data += "Received Item pose\tx: %2.5f\ty: %2.5f\tw: %3.2f\n" % (result_trans[0], result_trans[1], result['theta'])

		score_msgs.data += "\n"
		score_msgs.data += "Error Measured\t\tx: %2.5f\ty: %2.5f\tw: %3.2f\n" % (x_err, y_err, w_err)
	
		score_msgs.data += "\n"


		score_msgs.data += "class_accuracy:\t%i / %i\t  instance_accuracy:\t%i / %i\n"%(class_positives, runs, instance_positives, runs)

		score_msgs.data += "\n"
		if abs(x_err) < TRANS_ACCURACY : x_err = 0
		if abs(y_err) < TRANS_ACCURACY : y_err = 0
		if abs(w_err) < ROT_ACCURACY : w_err = 0

		pose_err_trans = math.sqrt(math.pow(x_err, 2) + math.pow(y_err, 2))
		if pose_err_trans > max_pose_error : pose_err_trans = 1

		pose_err_rot = abs(w_err) / 180
		if pose_err_rot > 1 : pose_err_rot = 1
		
		pose_score = 1 - (pose_err_trans / 2) - (pose_err_rot / 2)
		pose_score_sum = pose_score_sum + pose_score

		rospy.loginfo("Position score - %f (translation: %f \t rotation: %f)\n" % (pose_score, 1 - pose_err_trans, 1 - pose_err_rot))
		score_msgs.data += "Position score\t\t%f\ttranslation: %f \t rotation: %f\n" % (pose_score, 1 - pose_err_trans, 1 - pose_err_rot)

		# Evaluate execution time
		execution_time = execution_time + (end_time - start_time)

		rospy.loginfo("Execution time - %f" % execution_time)
		score_msgs.data += "Execution time\t\t%f\n" % execution_time

		#score_msgs.data += "- Waypoint %i\n  Position Accuracy:\t%1.1f cm\n  Orientation Accuracy:\t%1.1fÂ°\n  Time:\t%i s\n"%(i+1, waypoint_position_accuracy*100, math.fabs(waypoint_orientation_accuracy)*180/math.pi, waypoint_time)
		score_msgs.data += "\n\n\n"
		
		score_msgs_publisher.publish(score_msgs)
		

	# Evaluate final score
	score = {
		'class_accuracy': class_positives / BENCHMARK_RUNS,
		'instance_accuracy': instance_positives / BENCHMARK_RUNS,
		'pose_score': pose_score_sum / runs,
		'execution_time': execution_time

	}

	score_msgs.data += "Final Score\n  class_accuracy:\t%1.1f\n  instance_accuracy:\t%1.1f\n  pose_score:\t\t%1.1f"%(class_positives / BENCHMARK_RUNS, instance_positives / BENCHMARK_RUNS, pose_score_sum / runs)
	score_msgs_publisher.publish(score_msgs)
	
	print score
	score_yaml = yaml.dump(score)
	benchmark.SendScore(score_yaml)
	
	# Benchmark concluded
	benchmark.End()

#	print score
#	time.sleep(10)
	raw_input("press ENTER to close")
				
if __name__ == '__main__':
	main()
	
